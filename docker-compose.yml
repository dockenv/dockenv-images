services:
  nginx:
    image: ${DOCKER_REGISTRY_COMPOSE}/nginx:latest
    container_name: nginx
    restart: always
    deploy:
      mode: replicated
      # replicas: 4
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./runtime/logs/nginx:/var/log/nginx
      # - ./conf/nginx/conf.d:/etc/nginx/conf.d
      # - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
    links:
      # set php74 aliasor direct to use mysql57 no alias set
      - php74:php74
      - mysql57:mysql57
    networks:
      - boxs

  php74:
    image: ${DOCKER_REGISTRY_COMPOSE}/php:74
    container_name: php74
    restart: always
    privileged: true
    depends_on:
      - mysql57
    ports:
      - "9000:9000"
    volumes:
      - ./runtime/logs/php74/:/var/log/php-fpm/
    networks:
      - boxs
    dns:
      - 223.5.5.5
      - 8.8.8.8

  hhvm:
    image: ${DOCKER_REGISTRY_COMPOSE}/hhvm:latest
    expose:
      - "9000"

  mysql57:
    image: ${DOCKER_REGISTRY_COMPOSE}/mysql:5.7
    hostname: mysql57
    container_name: mysql57
    restart: always
    expose:
      - "3306"
    ports:
      - "${MYSQL57_PORT}:3306"
    volumes:
      # - ./runtime/data/mysql57:/var/lib/mysql
      - mysql57:/var/lib/mysql
      - ./runtime/logs/mysql57/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MYSQL57_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL57_DATABASE}
      - MYSQL_USER=${MYSQL57_USER}
      - MYSQL_PASSWORD=${MYSQL57_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      boxs:
        ipv4_address: ${MYSQL57_IP}

  postgres15:
    image: ${DOCKER_REGISTRY_COMPOSE}/postgres:15
    hostname: postgres15
    container_name: postgres15
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres15:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=default
      - POSTGRES_USER=dockenv
      - POSTGRES_PASSWORD=dockenv

  mysql80:
    image: ${DOCKER_REGISTRY_COMPOSE}/mysql:8.0
    hostname: mysql80
    container_name: mysql80
    restart: always
    # Only for Container
    expose:
      - "3306"
    ports:
      - "${MYSQL80_PORT}:3306"
    volumes:
      - mysql80:/var/lib/mysql
      - ./runtime/logs/mysql80/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MYSQL80_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL80_DATABASE}
      - MYSQL_USER=${MYSQL80_USER}
      - MYSQL_PASSWORD=${MYSQL80_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      boxs:
        ipv4_address: ${MYSQL80_IP}

  mariadb:
    image: ${DOCKER_REGISTRY_COMPOSE}/mariadb:latest
    hostname: mariadb
    container_name: mariadb
    restart: always
    expose:
      - "3306"
    ports:
      - "${MARIADB_PORT}:3306"
    volumes:
      - mariadb:/var/lib/mysql
      - ./runtime/logs/mariadb/:/var/log/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MARIADB_DATABASE}
      - MYSQL_USER=${MARIADB_USER}
      - MYSQL_PASSWORD=${MARIADB_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #only for container without host
    networks:
      boxs:
        ipv4_address: ${MARIADB_IP}

  redis:
    image: ${DOCKER_REGISTRY_COMPOSE}/redis:latest
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379/tcp"
    networks:
      boxs:
        ipv4_address: ${REDIS_IP}
    restart: always
    volumes:
      - ./runtime/conf/redis:/etc/redis
      - redis:/data
      - ./runtime/logs/redis:/var/log/redis
    command: redis-server /etc/redis/redis.conf

  memcached:
    image: ${DOCKER_REGISTRY_COMPOSE}/memcached:latest
    hostname: memcached
    container_name: memcached
    ports:
      - ${MEMCACHED_PORT}:11211

  mongo:
    image: ${DOCKER_REGISTRY_COMPOSE}/mongo:latest
    ports:
      - ${MONGO_PORT}:27017
    restart: always
    volumes:
      - mongo:/data/db
      - mongo-conf:/data/configdb
      - ./runtime/logs/mongo:/var/log/mongo
    environment:
      TZ: ${TIMEZONE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    # command: mongod --config /etc/mongod.conf
    networks:
      - boxs

  boxs:
    image: ${DOCKER_REGISTRY_COMPOSE}/boxs:latest
    hostname: boxs
    container_name: boxs
    volumes:
      - ~/Code:/data
    ports:
      - "10022:22"
      - "10080:80"
      - "10443:443"
      - "15901:5901"
      - "16080:6080"
      - "16901:6901"

  xfce4:
    image: ${DOCKER_REGISTRY_COMPOSE}/boxs:xfce
    hostname: xfce4
    container_name: xfce4
    privileged: true
    volumes:
      - ~/Code:/data
    ports:
      - "10022:22"
      - "15901:5901"
      - "16901:6901"

  elastic:
    image: ${DOCKER_REGISTRY_COMPOSE}/elastic:latest
    hostname: elastic
    container_name: elastic
    restart: always
    environment:
      - ELASTIC_PASSWORD=dockenv
      # - ENROLLMENT_TOKEN=dockenv
      - cluster.name=dockenv
      - discovery.type=single-node
      # 默认禁用 elasticsearch https 和登陆账号密码 仅适用于 Docker 测试环境
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      # - bootstrap.memory_lock=true
      # - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      # - script.painless.regex.enabled=true
      # - node.master=false
      # - node.data=true
      - TZ=${TIMEZONE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elastic:/usr/share/elasticsearch/data
      # - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      boxs:
        ipv4_address: ${ELASTICSEARCH_IP}

  kibana:
    image: ${DOCKER_REGISTRY_COMPOSE}/kibana:latest
    hostname: kibana
    container_name: kibana
    restart: always
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=["http://${ELASTICSEARCH_IP}:9200"]
      # - ELASTICSEARCH_HOSTS=https://elastic:9200
    ports:
      - "5601:5601"
    depends_on:
      - elastic
    links:
      - elastic:elastic
    networks:
      boxs:
        ipv4_address: ${KIBANA_IP}

  logstash:
    image: ${DOCKER_REGISTRY_COMPOSE}/logstash:latest
    hostname: logstash
    container_name: logstash
    restart: always
    ports:
      - "9600:9600"
      - "5044:5044"
    networks:
      boxs:
        ipv4_address: ${LOGSTASH_IP}

  rabbitmq:
    image: ${DOCKER_REGISTRY_COMPOSE}/rabbitmq:latest
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    ports:
      - "4369:4369"
      - "5671:5671"
      - "5672:5672"
      - "15691:15691"
      - "15692:15692"
      - "25672:25672"
    environment:
      TZ: "${TIMEZONE}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_NODE_IP_ADDRESS: "${RBMQ_IP}"
    volumes:
      - ./runtime/data/rabbitmq:/var/lib/rabbitmq
      - ./runtime/logs/rabbitmq:/var/log/rabbitmq
    networks:
      boxs:
        ipv4_address: ${RBMQ_IP}

  portainer:
    image: ${DOCKER_REGISTRY_COMPOSE}/portainer:latest
    hostname: portainer
    container_name: portainer
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:cached
      - ./runtime/data/portainer/:/data:cached
    networks:
      boxs:

  aria2:
    image: ${DOCKER_REGISTRY_COMPOSE}/aria2:latest
    hostname: aria2
    container_name: aria2
    ports:
      - "6800:6800"
      - "6801:6801"
      - "6802-6999:6802-6999"
    volumes:
      - $HOME/Downloads:/data/downloads:rw
      # - /Users/imxieke/Code/Project/dockenv/images/aria2/conf:/etc/aria2c
    environment:
      RPC_SECRET: dockenv
      ARIA2_PORT: 6800
      WEBUI_PORT: 6801
      DHT_PORT: "6802-6999"
    networks:
      boxs:

  gitea:
    image: ${DOCKER_REGISTRY_COMPOSE}/gitea:latest
    hostname: gitea
    container_name: gitea
    restart: always
    environment:
      - USER_UID=1000
      - USER_GID=1000
      # - GITEA_CUSTOM=/etc/gitea
    ports:
      - "3000:3000"
      - "3022:22"
    depends_on:
      - mysql80
    links:
      - mysql80:mysql80
    volumes:
      - gitea:/data
      # - ./runtime/conf/gitea:/etc/gitea
    networks:
      boxs:

  # default password ,default user: root
  # grep 'Password:' /etc/gitlab/initial_root_password
  gitlab:
    # image: ${DOCKER_REGISTRY_COMPOSE}/gitea:latest
    image: registry.gitlab.cn/omnibus/gitlab-jh:latest
    hostname: gitlab
    container_name: gitlab
    restart: always
    shm_size: 256mb
    environment:
      - GITLAB_ROOT_PASSWORD=dockenv@gitlab
    ports:
      - "2022:22"
      - "2080:80"
      - "2443:443"
    volumes:
      # - gitlabconf:/etc/gitlab
      - ./runtime/conf/gitlab:/etc/gitlab
      # - gitlablogs:/var/log/gitlab
      - ./runtime/logs/gitlab:/var/log/gitlab
      - gitlabdata:/var/opt/gitlab
    networks:
      boxs:

volumes:
  elastic:
  gitea:
  gitlabconf:
  gitlablogs:
  gitlabdata:
  redis:
  mariadb:
  mongo:
  mongo-conf:
  mysql57:
  mysql80:
  postgres15:

networks:
  boxs:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${SUBNET_IP}
          gateway: ${GATEWAY_IP}
