user nginx;
# daemon off;
# 一般设置为 cpu * 2
# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;
worker_cpu_affinity auto;
# worker_cpu_affinity 01 10 01 10;
# pid /run/nginx/nginx.pid;
worker_rlimit_nofile 51200;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;
include /etc/nginx/modules-enabled/*.conf;

# Include files with config snippets into the root context.
include /etc/nginx/conf.d/*.conf;

events {
    use epoll;
    multi_accept on;
	# The maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 51200;
}

http {
    charset utf-8;
    # Includes mapping of file name extensions to MIME types of responses and defines the default type.
    include /etc/nginx/mime.types;
    #include         proxy.conf;
    #include        luawaf.conf;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;

    default_type application/octet-stream;

    port_in_redirect off;
    output_buffers 4 32k;
    expires 0;
    connection_pool_size 256;
    reset_timedout_connection on;
    request_pool_size 32k;

    # Name servers used to resolve names of upstream servers into addresses.
    # It's also needed when using tcpsocket and udpsocket in Lua modules.
    #resolver 208.67.222.222 208.67.220.220;

    server_name_in_redirect off;
    server_names_hash_max_size 2048;
    server_names_hash_bucket_size 128;
    # 使用此指令指定用于读取大型客户端请求标头的缓冲区的最大数量和大小.
    # 指令large_client_header_buffers 2 1k将缓冲区的最大数量设置为 2，每个缓冲区的最大大小为 1k。该指令将接受 2 kB 数据 URI。
    large_client_header_buffers 4 32k;

    # Specifies the maximum accepted body size of a client request, as
    # indicated by the request header Content-Length. If the stated content
    # length is greater than this size, then the client receives the HTTP
    # error code 413. Set to 0 to disable.
    # 使用此指令指定客户端请求的最大可接受正文大小。1k 指令应该足够了，但如果您通过 POST 方法接收文件上传，则需要增加它。
    client_max_body_size 128m;
    # 此指令指定客户端请求标头的标头缓冲区大小。1k 的缓冲区大小足以满足大多数请求。
    client_header_buffer_size 32k;
    client_body_timeout 10;
    # 使用此指令指定客户端请求正文缓冲区大小。默认值为 8k 或 16k，但建议将其设置为低至 1k
    client_body_buffer_size 32k;
    client_header_timeout 10;

    # Sendfile copies data between one FD and other from within the kernel,
    # which is more efficient than read() + write().
    sendfile on;
    send_timeout 5;
    types_hash_max_size 2048;

    # Causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. Default is 'off'.
    tcp_nopush on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 60;

    # Don't buffer data-sends (disable Nagle algorithm).
    # Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    # FastCGI
    fastcgi_connect_timeout 5;
    fastcgi_send_timeout 120s;
    fastcgi_read_timeout 120s;

    # 创建 8 个大小为 4K 的缓冲区
    fastcgi_buffers 64 128k;
    fastcgi_buffer_size 128k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 256k;
    fastcgi_intercept_errors on;
    fastcgi_hide_header X-Powered-By;

    # SSL Settings
    # Dropping SSLv3, ref: POODLE
	# Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
	# TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

    # Path of the file with Diffie-Hellman parameters for EDH ciphers.
    # TIP: Generate with: `openssl dhparam -out /etc/ssl/nginx/dh2048.pem 2048`
    ssl_dhparam /etc/nginx/dh2048.pem;

    # Specifies that our cipher suits should be preferred over client ciphers.
    ssl_prefer_server_ciphers on;

    # Enables a shared SSL cache with size that can hold around 8000 sessions.
    ssl_session_cache shared:SSL:2m;

	# Specifies a time during which a client may reuse the session parameters.
	# Default is '5m'.
	ssl_session_timeout 1h;

	# Disable TLS session tickets (they are insecure). Default is 'on'.
	ssl_session_tickets off;

    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

    # Serve brotli compressed CSS, JS, HTML, SVG, ICS and JSON files if they exist
    # and if the client accepts br encoding.
    # brotli-compressed resources.
    # https://github.com/eustas/ngx_brotli/#brotli_static
    # brotli_static on;
    # brotli on;
    # brotli_types text/plain text/css application/json application/javascript application/x-javascript text/javascript;
    # brotli_comp_level 4;

    # Enable gzipping of responses.
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 16 8k;
    # 压缩响应所需的请求的最低 HTTP 版本
    gzip_http_version 1.1;
    # 响应的 gzip 压缩level。可接受的值在 1 到 9 的范围内。
    gzip_comp_level 6;
    gzip_types text/vnd.wap.wml text/javascript text/xml text/plain text/css application/json application/javascript application/x-javascript application/xml application/xml+rss application/xhtml+xml;

    # Set the Vary HTTP header as defined in the RFC 2616.
    # Default is 'off'.
    gzip_vary on;
    # gzip_proxied any;
    gzip_proxied expired no-cache no-store private auth;
    # gzip_disable "MSIE [1-6]\.";
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    # Enable checking the existence of precompressed files.
    # gzip_static on;

    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # Don't tell nginx version to clients. Default is 'on'.
    server_tokens off;
    more_clear_headers 'Server: Nginx Running On Docker/UnLimited Version';

    # Disabled for issue https://github.com/laradock/laradock/issues/619
    # open_file_cache off;
    open_file_cache max=10000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Specifies the main log format.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    # 'Accept: "$http_accept" ' 'Authorization: "$http_authorization" ';

	# Helper variable for proxying websockets.
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

    # Sets the path, format, and configuration for a buffered log write.
    # access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/access.log combined;

    # Configures default error logger.
    # options debug error warn crit (error) main access (access_log) or output to /dev/stderr /dev/stdout
    # warn crit
    error_log /var/log/nginx/error.log debug;

    # Includes files with directives to load dynamic modules.
    include /etc/nginx/vhost.d/*.conf;

	# Includes virtual hosts configs.
    # Alpinelinux default config
	include /etc/nginx/http.d/*.conf;
}

# TIP: Uncomment if you use stream module.
#include /etc/nginx/stream.conf;
